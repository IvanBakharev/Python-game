import pygame
import random

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
pygame.init()

# –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –∏–≥—Ä—ã
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
game_window = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption("My Game")

# –†–∞–∑–º–µ—Ä—ã –∫–ª–µ—Ç–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
CELL_SIZE = 50

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫
def generate_rivers():
    rivers = []
    for _ in range(5):
        x = random.randint(0, WINDOW_WIDTH // CELL_SIZE - 1)
        y = random.randint(0, WINDOW_HEIGHT // CELL_SIZE - 1)
        rivers.append((x, y))
    return rivers

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤
def generate_trees():
    trees = []
    for _ in range(10):
        x = random.randint(0, WINDOW_WIDTH // CELL_SIZE - 1)
        y = random.randint(0, WINDOW_HEIGHT // CELL_SIZE - 1)
        trees.append((x, y))
    return trees

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
def is_valid_cell(x, y):
    return 0 <= x < WINDOW_WIDTH // CELL_SIZE and 0 <= y < WINDOW_HEIGHT // CELL_SIZE

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã
def game_loop():
    running = True

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫ –∏ –¥–µ—Ä–µ–≤—å–µ–≤
    rivers = generate_rivers()
    trees = generate_trees()

    # –ü–æ–∑–∏—Ü–∏—è –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞
    helicopter_x = WINDOW_WIDTH // 2 // CELL_SIZE
    helicopter_y = WINDOW_HEIGHT // 2 // CELL_SIZE

    while running:
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ–Ω–∞
        game_window.fill((0, 255, 0))
        for y in range(0, WINDOW_HEIGHT, CELL_SIZE):
            for x in range(0, WINDOW_WIDTH, CELL_SIZE):
                if (x // CELL_SIZE, y // CELL_SIZE) in rivers:
                    pygame.draw.rect(game_window, (0, 0, 255), (x, y, CELL_SIZE, CELL_SIZE))
                    game_window.blit(pygame.font.SysFont("Segoe UI Emoji", 30).render("üåä", True, (0, 0, 0)), (x + 10, y + 10))
                else:
                    pygame.draw.rect(game_window, (0, 255, 0), (x, y, CELL_SIZE, CELL_SIZE))
                    game_window.blit(pygame.font.SysFont("Segoe UI Emoji", 30).render("üü©", True, (0, 0, 0)), (x + 10, y + 10))

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤
        for tree in trees:
            x, y = tree
            game_window.blit(pygame.font.SysFont("Segoe UI Emoji", 30).render("üå≥", True, (0, 0, 0)), (x * CELL_SIZE + 10, y * CELL_SIZE + 10))

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞
        game_window.blit(pygame.font.SysFont("Segoe UI Emoji", 30).render("üöÅ", True, (0, 0, 0)), (helicopter_x * CELL_SIZE + 10, helicopter_y * CELL_SIZE + 10))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞
                if event.key == pygame.K_UP and is_valid_cell(helicopter_x, helicopter_y - 1):
                    helicopter_y -= 1
                elif event.key == pygame.K_DOWN and is_valid_cell(helicopter_x, helicopter_y + 1):
                    helicopter_y += 1
                elif event.key == pygame.K_LEFT and is_valid_cell(helicopter_x - 1, helicopter_y):
                    helicopter_x -= 1
                elif event.key == pygame.K_RIGHT and is_valid_cell(helicopter_x + 1, helicopter_y):
                    helicopter_x += 1

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞ —Å —Ä–µ–∫–æ–π –∏–ª–∏ –¥–µ—Ä–µ–≤–æ–º
                if (helicopter_x, helicopter_y) in rivers or (helicopter_x, helicopter_y) in trees:
                    print("Game Over")
                    running = False

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
        pygame.display.update()

# –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
game_loop()

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Pygame
pygame.quit()